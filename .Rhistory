setmean <- function(mean) m <<- mean
}
source('~/R/prog-assn-2-scratch/cachemean.R')
vec <- c(1:10)
meanVec <- makeVector(vec)
source('~/.active-rstudio-document')
meanVec <- makeVector(vec)
ls(environment(meanVec))
meanVecCached <- cachemean(meanVec)
meanVecCached <- cachemean(meanVec)
m <- 1:16
dim(m) <- c(4,4)
m
source('~/R/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
chacheSolve(m2)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
chacheSolve(m2)
cacheSolve(m2)
solve(m2)
m2
makeVector
meanVec
solve(m)
m <- 1:4
dim(m) <- c(2,2)
solve(m)
solve(m2)
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
cacheSolve(m2)
m2$get
m2$get()
m = (1:9)
dim(m) <- c(3,3)
m2$set(m)
m2$setinverse(inverse)
m2$setinverse()
m2$setinverse(m)
cacheSolve(m2)
m2$getinverse(m)
m2$getinverse()
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
m = (1:100)
dim(m) <- c(10,10)
m
solve(m)
m = (1:81)
dim(m) <- c(9,9)
solve(m)
m = (1:64)
dim(m) <- c(8,8)
m = (1:64)
solve(m)
dim(m) <- c(8,8)
solve(m)
m = (1:49)
dim(m) <- c(7,7)
solve(m)
m = diag(10)
solve(m)
